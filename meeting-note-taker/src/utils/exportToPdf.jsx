import { jsPDF } from 'jspdf';

/**
 * Exports the provided text to a PDF document
 * @param {string} text - The text content to export
 * @param {string} title - The title of the document
 * @returns {Promise<void>} - A promise that resolves when the export is complete
 */
const exportToPdf = (text, title = "Meeting Notes") => {
  return new Promise((resolve, reject) => {
    try {
      // Create a new PDF document
      const doc = new jsPDF({
        orientation: 'portrait',
        unit: 'mm',
        format: 'a4'
      });
      
      // Set document properties
      doc.setProperties({
        title: title,
        subject: 'Meeting Notes',
        author: 'Meeting Note Taker',
        keywords: 'meeting, notes, speech-to-text',
        creator: 'Meeting Note Taker'
      });
      
      // Add title
      doc.setFontSize(24);
      doc.setTextColor(0, 0, 0);
      doc.text(title, 105, 20, { align: 'center' });
      
      // Add date
      const currentDate = new Date().toLocaleDateString();
      doc.setFontSize(12);
      doc.setTextColor(100, 100, 100);
      doc.text(`Date: ${currentDate}`, 190, 30, { align: 'right' });
      
      // Add content
      doc.setFontSize(12);
      doc.setTextColor(0, 0, 0);
      
      // Split text into lines and handle pagination
      const textLines = doc.splitTextToSize(text || "No notes available.", 170);
      
      let y = 40; // Starting y position
      const pageHeight = doc.internal.pageSize.height - 20; // Bottom margin
      
      // Add lines with pagination
      for (let i = 0; i < textLines.length; i++) {
        if (y > pageHeight) {
          doc.addPage();
          y = 20; // Reset y position for new page
        }
        
        doc.text(textLines[i], 20, y);
        y += 7; // Line height
      }
      
      // Add footer
      const totalPages = doc.internal.getNumberOfPages();
      for (let i = 1; i <= totalPages; i++) {
        doc.setPage(i);
        doc.setFontSize(10);
        doc.setTextColor(150, 150, 150);
        doc.text('Generated by Meeting Note Taker - Privacy-First Speech-to-Text', 105, 287, { align: 'center' });
        doc.text(`Page ${i} of ${totalPages}`, 190, 287, { align: 'right' });
      }
      
      // Generate a safe filename
      const safeTitle = title.replace(/[^a-z0-9]/gi, '_').substring(0, 50);
      const filename = `${safeTitle}_${currentDate.replace(/\//g, '-')}.pdf`;
      
      // Save the PDF
      doc.save(filename);
      resolve();
    } catch (error) {
      console.error('Error creating PDF:', error);
      reject(error);
    }
  });
};

export default exportToPdf;
